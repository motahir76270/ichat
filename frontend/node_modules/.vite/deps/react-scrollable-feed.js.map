{
  "version": 3,
  "sources": ["../../react-scrollable-feed/src/index.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\nimport { CSSProperties } from 'react';\r\n\r\nexport type ScrollableFeedProps = {\r\n    forceScroll?: boolean;\r\n    animateScroll?: (element: HTMLElement, offset: number) => void;\r\n    onScrollComplete?: () => void;\r\n    changeDetectionFilter?: (previousProps: ScrollableFeedComponentProps, newProps: ScrollableFeedComponentProps) => boolean;\r\n    viewableDetectionEpsilon?: number;\r\n    className?: string;\r\n    onScroll?: (isAtBottom: boolean) => void;\r\n    debug?: boolean\r\n}\r\n\r\ntype ScrollableFeedComponentProps = React.PropsWithChildren<ScrollableFeedProps>;\r\n\r\nclass ScrollableFeed extends React.Component<React.PropsWithChildren<ScrollableFeedProps>> {\r\n    private readonly wrapperRef: React.RefObject<HTMLDivElement>;\r\n    private readonly bottomRef: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: ScrollableFeedProps) {\r\n        super(props);\r\n        this.bottomRef = React.createRef();\r\n        this.wrapperRef = React.createRef();\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n\r\n        if (this.props.debug) console.log(\"Component cstr\");\r\n    }\r\n\r\n    static defaultProps: ScrollableFeedProps = {\r\n        forceScroll: false,\r\n        animateScroll: (element: HTMLElement, offset: number): void => {\r\n            if (element.scrollBy) {\r\n                element.scrollBy({ top: offset });\r\n            }\r\n            else {\r\n                element.scrollTop = offset;\r\n            }\r\n        },\r\n        onScrollComplete: () => {},\r\n        changeDetectionFilter: () => true,\r\n        viewableDetectionEpsilon: 2,\r\n        onScroll: () => {},\r\n    };\r\n\r\n    getSnapshotBeforeUpdate(): boolean {\r\n        if (this.props.debug) console.log(\"Component \", this.getSnapshotBeforeUpdate.name);\r\n        if (this.wrapperRef.current && this.bottomRef.current) {\r\n            const { viewableDetectionEpsilon } = this.props;\r\n            return ScrollableFeed.isViewable(this.wrapperRef.current, this.bottomRef.current, viewableDetectionEpsilon!); //This argument is passed down to componentDidUpdate as 3rd parameter\r\n        }\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate(previousProps: ScrollableFeedComponentProps, _previousState: any, snapshot: boolean): void {\r\n        if (this.props.debug) console.log(\"Component \", this.componentDidUpdate.name);\r\n        const { forceScroll, changeDetectionFilter } = this.props;\r\n        const isValidChange = changeDetectionFilter!(previousProps, this.props);\r\n        if (isValidChange && (forceScroll || snapshot) && this.bottomRef.current && this.wrapperRef.current) {\r\n            this.scrollParentToChild(this.wrapperRef.current, this.bottomRef.current);\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.props.debug) console.log(\"Component \", this.componentDidMount.name);\r\n        //Scroll to bottom from the start\r\n        if (this.bottomRef.current && this.wrapperRef.current) {\r\n            this.scrollParentToChild(this.wrapperRef.current, this.bottomRef.current);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scrolls a parent element such that the child element will be in view\r\n     * @param parent\r\n     * @param child\r\n     */\r\n    protected scrollParentToChild(parent: HTMLElement, child: HTMLElement): void {\r\n        const { viewableDetectionEpsilon } = this.props;\r\n        if (!ScrollableFeed.isViewable(parent, child, viewableDetectionEpsilon!)) {\r\n            //Source: https://stackoverflow.com/a/45411081/6316091\r\n            const parentRect = parent.getBoundingClientRect();\r\n            const childRect = child.getBoundingClientRect();\r\n\r\n            //Scroll by offset relative to parent\r\n            const scrollOffset = (childRect.top + parent.scrollTop) - parentRect.top;\r\n            const { animateScroll, onScrollComplete } = this.props;\r\n            if (animateScroll) {\r\n                animateScroll(parent, scrollOffset);\r\n                onScrollComplete!();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether a child element is visible within a parent element\r\n     *\r\n     * @param parent\r\n     * @param child\r\n     * @param epsilon\r\n     */\r\n    private static isViewable(parent: HTMLElement, child: HTMLElement, epsilon: number): boolean {\r\n        epsilon = epsilon || 0;\r\n\r\n        //Source: https://stackoverflow.com/a/45411081/6316091\r\n        const parentRect = parent.getBoundingClientRect();\r\n        const childRect = child.getBoundingClientRect();\r\n\r\n        const childTopIsViewable = (childRect.top >= parentRect.top);\r\n\r\n        const childOffsetToParentBottom = parentRect.top + parent.clientHeight - childRect.top;\r\n        const childBottomIsViewable = childOffsetToParentBottom + epsilon >= 0;\r\n\r\n        return childTopIsViewable && childBottomIsViewable;\r\n    }\r\n\r\n    /**\r\n     * Fires the onScroll event, sending isAtBottom boolean as its first parameter\r\n     */\r\n    protected handleScroll(): void {\r\n        const { viewableDetectionEpsilon, onScroll } = this.props;\r\n        if (onScroll && this.bottomRef.current && this.wrapperRef.current) {\r\n            const isAtBottom = ScrollableFeed.isViewable(this.wrapperRef.current, this.bottomRef.current, viewableDetectionEpsilon!);\r\n            onScroll(isAtBottom);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scroll to the bottom\r\n     */\r\n    public scrollToBottom(): void {\r\n        if (this.bottomRef.current && this.wrapperRef.current) {\r\n            this.scrollParentToChild(this.wrapperRef.current, this.bottomRef.current);\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        if (this.props.debug) console.log(\"Component \", this.render.name);\r\n\r\n        const style: CSSProperties = {\r\n            maxHeight: \"inherit\",\r\n            height: \"inherit\",\r\n            overflowY: \"auto\",\r\n        };\r\n        const { children, className } = this.props;\r\n        return (\r\n            <div className={className} style={style} ref={this.wrapperRef} onScroll={this.handleScroll}>\r\n                {children}\r\n                <div ref={this.bottomRef}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScrollableFeed;\r\n"],
  "mappings": "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",
  "names": ["ScrollableFeed", "Component", "constructor", "props", "super", "this", "wrapperRef", "bottomRef", "createRef", "handleScroll", "bind", "debug", "console", "log", "getSnapshotBeforeUpdate", "name", "current", "viewableDetectionEpsilon", "isViewable", "componentDidUpdate", "previousProps", "_previousState", "snapshot", "forceScroll", "changeDetectionFilter", "scrollParentToChild", "componentDidMount", "parent", "child", "parentRect", "getBoundingClientRect", "scrollOffset", "top", "scrollTop", "animateScroll", "onScrollComplete", "epsilon", "childRect", "clientHeight", "onScroll", "scrollToBottom", "render", "children", "className", "React", "style", "maxHeight", "height", "overflowY", "ref", "createElement", "defaultProps", "element", "offset", "scrollBy"]
}
